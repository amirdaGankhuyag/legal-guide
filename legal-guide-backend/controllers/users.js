const User = require("../models/User");
const MyError = require("../utils/myError");
const asyncHandler = require("../middlewares/asyncHandler");
const sendEmail = require("../utils/email");
const crypto = require("crypto");

/**  –•—ç—Ä—ç–≥–ª—ç–≥—á —à–∏–Ω—ç—ç—Ä –±“Ø—Ä—Ç–≥“Ø“Ø–ª—ç—Ö */ 
exports.register = asyncHandler(async (req, res, next) => {
  const user = await User.create(req.body);
  const jwt = user.getJsonWebToken();

  res.status(200).json({
    success: true,
    token: jwt,
    user,
  });
});

/** –•—ç—Ä—ç–≥–ª—ç–≥—á –Ω—ç–≤—Ç—Ä—ç—Ö */
exports.login = asyncHandler(async (req, res, next) => {
  const { email, password } = req.body;
  // –û—Ä–æ–ª—Ç—ã–≥ —à–∞–ª–≥–∞–Ω–∞
  if (!email || !password)
    throw new MyError("–ò–º—ç–π–ª –±–æ–ª–æ–Ω –Ω—É—É—Ü “Ø–≥—ç—ç –æ—Ä—É—É–ª–Ω–∞ —É—É", 400);
  // –¢—É—Ö–∞–π–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–≥ —Ö–∞–π–Ω–∞
  const user = await User.findOne({ email }).select("+password");
  if (!user) throw new MyError("–ò–º—ç–π–ª –±–æ–ª–æ–Ω –Ω—É—É—Ü “Ø–≥—ç—ç –∑”©–≤ –æ—Ä—É—É–ª–Ω–∞ —É—É", 401);

  // –ù—É—É—Ü “Ø–≥–∏–π–≥ —à–∞–ª–≥–∞—Ö
  const ok = await user.checkPassword(password);
  if (!ok) throw new MyError("–ò–º—ç–π–ª –±–æ–ª–æ–Ω –Ω—É—É—Ü “Ø–≥—ç—ç –∑”©–≤ –æ—Ä—É—É–ª–Ω–∞ —É—É", 401);

  const token = user.getJsonWebToken();

  res.status(200).json({
    // cookie-–≥ “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞
    success: true,
    token,
    user,
  });
});

/** –ù—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö */
exports.forgotPassword = asyncHandler(async (req, res, next) => {
  if (!req.body.email)
    throw new MyError("–¢–∞ –Ω—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö –∏–º—ç–π–ª —Ö–∞—è–≥–∞–∞ –¥–∞–º–∂—É—É–ª–Ω–∞ —É—É", 403);

  const user = await User.findOne({ email: req.body.email });

  if (!user) {
    throw new MyError(
      req.body.email + " –∏–º—ç–π–ª —Ö–∞—è–≥—Ç–∞–π —Ö—ç—Ä—ç–≥–ª—ç–≥—á –æ–ª–¥—Å–æ–Ω–≥“Ø–π!",
      400
    ); // –£—Ä—Ç –Ω—å –∏–∂–∏–ª –±–æ–ª–æ–≤—á –±–∞–π—Ö–≥“Ø–π ID-—Ç–∞–π “Ø–µ–¥ –∞–∂–∏–ª–ª–∞–Ω–∞
  }

  const resetToken = user.generatePasswordChangeToken();
  await user.save();
  // await user.save({ validateBeforeSave: false }); // db-–¥ —Ö–∞–¥–≥–∞–ª–Ω–∞, validateBeforeSave: false –Ω—å mongoose-–∏–π–Ω validator-—É—É–¥—ã–≥ –∞–∂–ª—É—É–ª–∞—Ö–≥“Ø–π

  //–ò–º—ç–π–ª –∏–ª–≥—ç—ç–Ω—ç
  const link = `https://legal-guide.mn/changepassword/${resetToken}`;

  const message = `–°–∞–π–Ω –±–∞–π–Ω–∞ —É—É. üëã <br><br>–¢–∞ –Ω—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö —Ö“Ø—Å—ç–ª—Ç –∏–ª–≥—ç—ç–ª—ç—ç. –ù—É—É—Ü “Ø–≥–∏–π–≥ –¥–æ–æ—Ä—Ö –ª–∏–Ω–∫ –¥—ç—ç—Ä –¥–∞—Ä–∂ —Å–æ–ª–∏–Ω–æ —É—É: üëá<br><br><a target="_blanks" href="${link}">${link}</a><br><br>”®–¥—Ä–∏–π–≥ —Å–∞–π—Ö–∞–Ω ”©–Ω–≥”©—Ä“Ø“Ø–ª—ç—ç—Ä—ç–π. üí™ü•∞`;

  const info = await sendEmail({
    email: user.email,
    subject: "–ù—É—É—Ü “Ø–≥ —Å—ç—Ä–≥—ç—ç—Ö —Ö“Ø—Å—ç–ª—Ç",
    message,
  });

  console.log("Message sent: %s", info.messageId);
  // Message sent: <d786aa62-4e0a-070a-47ed-0b0666549519@ethereal.email>

  res.status(200).json({
    success: true,
    resetToken,
  });
});

/** –ù—É—É—Ü “Ø–≥ —Å–æ–ª–∏—Ö */
exports.resetPassword = asyncHandler(async (req, res, next) => {
  if (!req.body.resetToken || !req.body.password)
    throw new MyError("–¢–∞ —Ç–æ–∫–µ–Ω –±–æ–ª–æ–Ω –Ω—É—É—Ü “Ø–≥—ç—ç –¥–∞–º–∂—É—É–ª–Ω–∞ —É—É", 400);

  const encrypted = crypto
    .createHash("sha256")
    .update(req.body.resetToken)
    .digest("hex");

  const user = await User.findOne({
    resetPasswordToken: encrypted,
    resetPasswordExpire: { $gt: Date.now() },
  });

  if (!user) {
    throw new MyError("–¢–æ–∫–µ–Ω —Ö“Ø—á–∏–Ω–≥“Ø–π –±–∞–π–Ω–∞!", 400); // –£—Ä—Ç –Ω—å –∏–∂–∏–ª –±–æ–ª–æ–≤—á –±–∞–π—Ö–≥“Ø–π ID-—Ç–∞–π “Ø–µ–¥ –∞–∂–∏–ª–ª–∞–Ω–∞
  }

  user.password = req.body.password;
  user.resetPasswordToken = undefined;
  user.resetPasswordExpire = undefined;
  await user.save();

  const jwt = user.getJsonWebToken();

  res.status(200).json({
    success: true,
    token: jwt,
    user: user,
  });
});
